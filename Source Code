Computer.class
---------------------------
public class Computer extends Player {
  String pastRolls = "";
  
  int curRoll = 0;
  
  int prevRoll = 0;
  
  int streak = 0;
  
  int longest = 0;
  
  int score = 0;
  
  int rerolls = 3;
  
  int wins = 0;
  
  int losses = 0;
  
  public int roll() {
    return (int)(Math.random() * 6.00) + 1;
  }
  
  //Rolls a random number between 1 and 6.99
  
  public void reset() {
    this.pastRolls = "";
    this.curRoll = 0;
    this.prevRoll = 0;
    this.streak = 0;
    this.longest = 0;
    this.score = 0;
    this.rerolls = 3;
  }
  //Resets score, pastRolls, streak, longest streak, currentRoll, pastRoll and rerolls
  
  public void computerTurn(int i) {
    this.prevRoll = this.curRoll;
    this.curRoll = roll();
    if (this.curRoll != this.prevRoll && 
      Math.random() * 2.0D >= 1.0D && this.rerolls != 0) {
      this.curRoll = roll();
      this.rerolls--;
      this.score -= 50;
    } 
    if (this.curRoll != this.prevRoll && 
      Math.random() * 2.0D >= 1.25D && this.rerolls != 0) {
      this.curRoll = roll();
      this.rerolls--;
      this.score -= 50;
    } 
    if (this.curRoll != this.prevRoll && 
      Math.random() * 2.0D >= 1.5D && this.rerolls != 0) {
      this.curRoll = roll();
      this.rerolls--;
      this.score -= 50;
    } 
    JOP.msg("Computer rolls a " + this.curRoll);
    increment();
  }
  
  //Rolls a number for the computer and rerolls if another would be favorable
  
  public void increment() {
    if (this.curRoll == this.prevRoll) {
      this.streak++;
      if (this.streak > this.longest) {
        this.longest = this.streak;
        JOP.msg("New longest streak of " + this.longest + "!");
      } 
      this.score += this.curRoll * this.streak * 50;
      JOP.msg("Computer's streak is " + this.streak + " long and worth " + (this.curRoll * this.streak * 50) + " points, with a total score of " + this.score);
    } else {
      this.streak = 0;
    } 
  }
  
  //Increments streak/longest streak of player or computer if they win or the streak is greater than longest
  
  public int getScore() {
    return this.score;
  }
  
  public int getStreak() {
    return this.streak;
  }
  
  public int getLongest() {
    return this.longest;
  }
  
  public int getWins() {
    return this.wins;
  }
  
  public int getLosses() {
    return this.losses;
  }
  
  public void addWin() {
    this.wins++;
  }
  
  //Adds a win
  
  public void addLoss() {
    this.losses++;
  }
  
  //Adds a loss
}
Controller.class
---------------------------
public class Controller {
  public Controller(Player1 plr1, Player2 plr2, Computer cpu) {}
  //Initializes player1, player2 and cpu
}
JOP.class
---------------------------
import javax.swing.JOptionPane;

public class JOP {
  public static void msg(String msg) {
    JOptionPane.showMessageDialog(null, msg);
  }
  
  //Displays parameter msg
  
  public static String in(String msg) {
    return JOptionPane.showInputDialog(msg);
  }
  
  //Displays parameter msg and takes input
}
Main.class
---------------------------
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;

public class Main {
  public static boolean plrOrCpu;
  
  public static File list;
  
  public static File tmp;
  
  public static FileWriter fileWriter;
  
  public static BufferedWriter bufferedWriter;
  
  public static Scanner scan;
  
  static Player1 plr1;
  
  static Player2 plr2;
  
  static Computer cpu;
  
  public static void main(String[] args) {
    JOP.msg("This is a game of dice, where your objective is to get as many dice rolls in a row as possible.\nYou have 3 rerolls per game, use them wisely.");
    try {
      list = new File("./diceToss.txt");
      tmp = new File(list + ".tmp");
      fileWriter = new FileWriter(list, true);
      bufferedWriter = new BufferedWriter(fileWriter);
      scan = new Scanner(list);
    } catch (Exception I) {
      System.exit(0);
    } 
    plr1 = new Player1();
    plr2 = new Player2();
    cpu = new Computer();
    while (true) {
      String input = JOP.in("Do you want to play against a human or cpu? Enter H for human, C for cpu.\n The current win-loss ratios are:\nPlayer 1: " + plr1.getWins() + " to " + plr1.getLosses() + "\nPlayer 2: " + plr2.getWins() + " to " + plr2.getLosses() + "\nComputer: " + cpu.getWins() + " to " + cpu.getLosses());
      if (input.equalsIgnoreCase("c")) {
        plrOrCpu = false;
        for (int i = 0; i < 6; i++) {
          JOP.msg("There are " + (6 - i) + " rounds left. The score is " + plr1.getScore() + " (player 1) to " + cpu.getScore() + " (computer).");
          plr1.playerTurn(i);
          cpu.computerTurn(i);
        } 
        calculateWin(false);
      } else if (input.equalsIgnoreCase("h")) {
        plrOrCpu = true;
        for (int i = 0; i < 6; i++) {
          JOP.msg("There are " + (6 - i) + " rounds left. The score is " + plr1.getScore() + " (player 1) to " + plr2.getScore() + " (player 2).");
          plr1.playerTurn(i);
          plr2.playerTurn(i);
        } 
        calculateWin(true);
      } else if (input == null) {
        SaveLoad.save();
      } 
      plr1.reset();
      plr2.reset();
      cpu.reset();
    } 
  }
  
  //Takes player input (Player versus player or computer versus player), check for wins, and handles player turns
  
  public static boolean calculateWin(boolean plrOrCpu) {
    if (plrOrCpu) {
      if (plr1.getScore() > plr2.getScore()) {
        JOP.msg("Player 1 wins the game!");
        plr2.addLoss();
        plr1.addWin();
        return true;
      } 
      if (plr1.getScore() < plr2.getScore()) {
        JOP.msg("Player 2 wins the game!");
        plr1.addLoss();
        plr2.addWin();
        return false;
      } 
      JOP.msg("No one wins... (tie)");
      return false;
    } 
    if (plr1.getScore() > cpu.getScore()) {
      JOP.msg("Player 1 wins the game!");
      plr2.addLoss();
      cpu.addWin();
      return true;
    } 
    if (plr1.getScore() < cpu.getScore()) {
      JOP.msg("Cpu wins the game!");
      plr1.addLoss();
      cpu.addWin();
      return false;
    } 
    JOP.msg("No one wins... (tie)");
    return false;
  }
  
  //Checks for a win 
}
Player.class
---------------------------
public abstract class Player {
  int curRoll;
  
  int prevRol1;
  
  int streak;
  
  int longest;
  
  int score;
  
  int rerolls;
  
  int wins;
  
  int losses;
  
  abstract int roll();
  
  //Abstract roll method
  
  abstract void reset();
  
  //Abstract reset method
}
Player1.class
---------------------------
public class Player1 extends Player {
  String pastRolls = "";
  
  int curRoll = 0;
  
  int prevRoll = 0;
  
  int streak = 0;
  
  int longest = 0;
  
  int score = 0;
  
  int rerolls = 3;
  
  int wins = 0;
  
  int losses = 0;
  
  public int roll() {
    return (int)(Math.random() * 6.00) + 1;
  }
  
  //Rolls a number between 1 and 6.99
  
  public void reset() {
    this.pastRolls = "";
    this.curRoll = 0;
    this.prevRoll = 0;
    this.streak = 0;
    this.longest = 0;
    this.score = 0;
    this.rerolls = 3;
  }
  
  //Resets variables
  
  public int playerTurn(int i) {
    this.prevRoll = this.curRoll;
    this.curRoll = roll();
    while (true) {
      String input = JOP.in("Player one rolls a " + this.curRoll + ", do you want to reroll? (50 point penalty) You have " + this.rerolls + " rerolls left.\nY for yes, N for no, cancel to quit.");
      if (input.equalsIgnoreCase("y") && this.rerolls > 0) {
        this.curRoll = roll();
        this.rerolls--;
        this.score -= 50;
        continue;
      } 
      if (input.equalsIgnoreCase("y") && this.rerolls == 0) {
        JOP.msg("You have no rerolls left.");
        increment();
        return this.curRoll;
      } 
      if (input.equalsIgnoreCase("n")) {
        increment();
        return this.curRoll;
      } 
      if (input == null) {
        System.exit(0);
        continue;
      } 
      break;
    } 
    JOP.msg("Invalid input, your roll is " + this.curRoll);
    increment();
    return this.curRoll;
  }
  
  //Handles this player's turn and takes input on rerolls
  
  public void increment() {
    if (this.curRoll == this.prevRoll) {
      this.streak++;
      if (this.streak > this.longest) {
        this.longest = this.streak;
        JOP.msg("New longest streak of " + this.longest + "!");
      } 
      this.score += this.curRoll * this.streak * 50;
      JOP.msg("Player 1, your streak is " + this.streak + " long and worth " + (this.curRoll * this.streak * 50) + " points, with a total score of " + this.score);
    } else {
      this.streak = 0;
    } 
  }
  
  //Increments points and and streak/longest
  
  public int getScore() {
    return this.score;
  }
  
  public int getStreak() {
    return this.streak;
  }
  
  public int getLongest() {
    return this.longest;
  }
  
  public int getWins() {
    return this.wins;
  }
  
  public int getLosses() {
    return this.losses;
  }
  
  public void addWin() {
    this.wins++;
  }
  
  //Adds a win
  
  public void addLoss() {
    this.losses++;
  }
  
  //Adds a loss
}
Player2.class
---------------------------
public class Player2 extends Player {
  String pastRolls = "";
  
  int curRoll = 0;
  
  int prevRoll = 0;
  
  int streak = 0;
  
  int longest = 0;
  
  int score = 0;
  
  int rerolls = 3;
  
  int wins = 0;
  
  int losses = 0;
  
  public int roll() {
    return (int)(Math.random() * 6.00) + 1;
  }
  
  //Rolls a number between 1 and 6.99
  
  public void reset() {
    this.pastRolls = "";
    this.curRoll = 0;
    this.prevRoll = 0;
    this.streak = 0;
    this.longest = 0;
    this.score = 0;
    this.rerolls = 3;
  }
  
  //Resets variables
  
  public int playerTurn(int i) {
    this.prevRoll = this.curRoll;
    this.curRoll = roll();
    while (true) {
      String input = JOP.in("Player two rolls a " + this.curRoll + ", do you want to reroll? (50 point penalty) You have " + this.rerolls + " rerolls left.\nY for yes, N for no, cancel to quit.");
      if (input.equalsIgnoreCase("y") && this.rerolls > 0) {
        this.curRoll = roll();
        this.rerolls--;
        continue;
      } 
      if (input.equalsIgnoreCase("y") && this.rerolls == 0) {
        JOP.msg("You have no rerolls left.");
        increment();
        return this.curRoll;
      } 
      if (input.equalsIgnoreCase("n")) {
        increment();
        return this.curRoll;
      } 
      if (input == null) {
        System.exit(0);
        continue;
      } 
      break;
    } 
    JOP.msg("Invalid input, your roll is " + this.curRoll);
    increment();
    return this.curRoll;
  }
  
  //Handles this player's turn and takes input on rerolls
  
  public void increment() {
    if (this.curRoll == this.prevRoll) {
      this.streak++;
      if (this.streak > this.longest) {
        this.longest = this.streak;
        JOP.msg("New longest streak of " + this.longest + "!");
      } 
      this.score += this.curRoll * this.streak * 50;
      JOP.msg("Player 2, your streak is " + this.streak + " long and worth " + (this.curRoll * this.streak * 50) + " points, with a total score of " + this.score);
    } else {
      this.streak = 0;
    } 
  }
  
  //Increments points and and streak/longest 
  
  public int getScore() {
    return this.score;
  }
  
  public int getStreak() {
    return this.streak;
  }
  
  public int getLongest() {
    return this.longest;
  }
  
  public int getWins() {
    return this.wins;
  }
  
  public int getLosses() {
    return this.losses;
  }
  
  public void addWin() {
    this.wins++;
  }
  
  //Adds a win
  
  public void addLoss() {
    this.losses++;
  }
  
  //Adds a loss
}
SaveLoad.class
---------------------------
public class SaveLoad {
  public static void save() {
    System.exit(0);
  }
  //Unimpletented save and load method
}
